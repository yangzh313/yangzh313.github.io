<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>leak on PeaceKeeper</title><link>https://yangzh313.github.io/tags/leak/</link><description>Recent content in leak on PeaceKeeper</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 20 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yangzh313.github.io/tags/leak/index.xml" rel="self" type="application/rss+xml"/><item><title>leak check</title><link>https://yangzh313.github.io/page/c++/leak_check/</link><pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate><guid>https://yangzh313.github.io/page/c++/leak_check/</guid><description>valgrind download use
leak check with valgrind valgrind --leak-check=full --show-leak-kinds=all --tool=memcheck bin/protector-server -f -c /etc/protector/protector.conf ==952002== ==952002== HEAP SUMMARY: ==952002== in use at exit: 364,554 bytes in 983 blocks ==952002== total heap usage: 1,071,487 allocs, 1,070,504 frees, 642,510,809 bytes allocated ==952002== ==952002== 23 bytes in 1 blocks are still reachable in loss record 1 of 41 ==952002== at 0x4C31593: operator new(unsigned long) (vg_replace_malloc.c:344) ==952002== by 0x5756A0E: void std::__cxx11::basic_string&amp;lt;char, std::char_traits&amp;lt;char&amp;gt;, std::allocator&amp;lt;char&amp;gt; &amp;gt;::_M_construct&amp;lt;char*&amp;gt;(char*, char*, std::forward_iterator_tag) (basic_string.</description></item></channel></rss>